// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyShowsLibraryProject.Infrastructure.Data;

#nullable disable

namespace MyShowsLibraryProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ReviewId");

                    b.HasIndex("SeriesId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Crew", b =>
                {
                    b.Property<int>("CrewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Crew identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CrewId"), 1L, 1);

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Crew biography");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("Date")
                        .HasComment("Crew birthdate");

                    b.Property<string>("MoreInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Crew link for more biography");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Crew name");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Crew nationality");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Crew picture link");

                    b.Property<string>("Pseudonyms")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Crew pseudonym");

                    b.HasKey("CrewId");

                    b.ToTable("Crews");

                    b.HasComment("Shows crew");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeId"), 1L, 1);

                    b.Property<int>("EpisodeNumeration")
                        .HasColumnType("int")
                        .HasComment("Number of the episode in the season");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Url for the episode poster");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("Date")
                        .HasComment("Episode release date");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int")
                        .HasComment("Season identifier");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int")
                        .HasComment("Number of season");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Episode summary");

                    b.HasKey("EpisodeId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");

                    b.HasComment("Season episode");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Genre identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Genre name");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasComment("Shows genres");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<DateTime>("DateOfRelease")
                        .HasColumnType("Date")
                        .HasComment("Movie release date");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasComment("Movie runtime");

                    b.Property<string>("ForMoreSummaryUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("URL for more info");

                    b.Property<string>("OriginalAudioLanguage")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Movie original lenguage");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Movie poster URL");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Movie summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Movie title");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Movie trailer URL");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");

                    b.HasComment("Movie model");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.MovieCrew", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasComment("Movie identifier");

                    b.Property<int>("CrewId")
                        .HasColumnType("int")
                        .HasComment("Crew identifier");

                    b.HasKey("MovieId", "CrewId");

                    b.HasIndex("CrewId");

                    b.ToTable("MoviesCrews");

                    b.HasComment("Movie crew");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasComment("Movie identifier");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Genre identifier");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MoviesGenres");

                    b.HasComment("Movie genres");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.MovieReview", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasComment("Movie identifier");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasComment("Review identifier");

                    b.HasKey("MovieId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("MoviesReviews");

                    b.HasComment("Movie reviews");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Review identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Review content");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("Rating given to the movie");

                    b.HasKey("ReviewId");

                    b.ToTable("Reviews");

                    b.HasComment("Review model");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Role identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<int>("CrewId")
                        .HasColumnType("int")
                        .HasComment("Crew identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Role name");

                    b.HasKey("RoleId");

                    b.HasIndex("CrewId");

                    b.ToTable("Roles");

                    b.HasComment("Crew role in the show");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Season", b =>
                {
                    b.Property<int>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Season identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeasonId"), 1L, 1);

                    b.Property<string>("EpisodesInSeason")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasComment("Number of episodes in the season");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Url for the season poster");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int")
                        .HasComment("Serie identifier");

                    b.Property<string>("YearOfRelease")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("The year saeson is released");

                    b.HasKey("SeasonId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Seasons");

                    b.HasComment("Show season");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Serie", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Serie identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesId"), 1L, 1);

                    b.Property<string>("ForMoreSummaryUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("URL for more info");

                    b.Property<string>("OriginalAudioLanguage")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Serie original language");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Serie poster URL");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Serie summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Serie title");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Serie trailer URL");

                    b.Property<string>("YearOfEnd")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Series end year");

                    b.Property<string>("YearOfStart")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Serie start year");

                    b.HasKey("SeriesId");

                    b.ToTable("Series");

                    b.HasComment("Serie model");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.SerieCrew", b =>
                {
                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasComment("Serie identifier");

                    b.Property<int>("CrewId")
                        .HasColumnType("int")
                        .HasComment("Crew identifier");

                    b.HasKey("SerieId", "CrewId");

                    b.HasIndex("CrewId");

                    b.ToTable("SeriesCrews");

                    b.HasComment("Serie crew");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.SerieGenre", b =>
                {
                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasComment("Serie identifier");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasComment("Genre identifier");

                    b.HasKey("SerieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SeriesGenres");

                    b.HasComment("Serie genres");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.SerieReview", b =>
                {
                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasComment("Serie identifier");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasComment("Review identitfier");

                    b.HasKey("SerieId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("SeriesReviews");

                    b.HasComment("Serie reviews");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.UserMovie", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasComment("Movie identifier");

                    b.HasKey("UserId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("UsersMovies");

                    b.HasComment("User movies");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.UserReview", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasComment("Review identifier");

                    b.HasKey("UserId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("UsersReviews");

                    b.HasComment("User reviews");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.UserSerie", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<int>("SerieId")
                        .HasColumnType("int")
                        .HasComment("Serie identifier");

                    b.HasKey("UserId", "SerieId");

                    b.HasIndex("SerieId");

                    b.ToTable("UsersSeries");

                    b.HasComment("User series");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Movie", null)
                        .WithMany("UserMovies")
                        .HasForeignKey("MovieId");

                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Review", null)
                        .WithMany("UserReviews")
                        .HasForeignKey("ReviewId");

                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Serie", null)
                        .WithMany("UserSerie")
                        .HasForeignKey("SeriesId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Episode", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.MovieCrew", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Crew", "Crew")
                        .WithMany("MovieCrew")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Movie", "Movie")
                        .WithMany("MovieCrews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.MovieGenre", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.MovieReview", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Movie", "Movie")
                        .WithMany("MovieReviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Review", "Review")
                        .WithMany("MovieReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Role", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Crew", "Crew")
                        .WithMany("Roles")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Season", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Serie", "Serie")
                        .WithMany("Seasons")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.SerieCrew", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Crew", "Crew")
                        .WithMany("SerieCrew")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Serie", "Serie")
                        .WithMany("SerieCrews")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.SerieGenre", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Genre", "Genre")
                        .WithMany("SerieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Serie", "Serie")
                        .WithMany("SerieGenres")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.SerieReview", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Review", "Review")
                        .WithMany("SerieReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Serie", "Serie")
                        .WithMany("SerieReviews")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.UserMovie", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.UserReview", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.UserSerie", b =>
                {
                    b.HasOne("MyShowsLibraryProject.Infrastructure.Data.Models.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Crew", b =>
                {
                    b.Navigation("MovieCrew");

                    b.Navigation("Roles");

                    b.Navigation("SerieCrew");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("SerieGenres");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Movie", b =>
                {
                    b.Navigation("MovieCrews");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieReviews");

                    b.Navigation("UserMovies");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Review", b =>
                {
                    b.Navigation("MovieReviews");

                    b.Navigation("SerieReviews");

                    b.Navigation("UserReviews");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("MyShowsLibraryProject.Infrastructure.Data.Models.Serie", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("SerieCrews");

                    b.Navigation("SerieGenres");

                    b.Navigation("SerieReviews");

                    b.Navigation("UserSerie");
                });
#pragma warning restore 612, 618
        }
    }
}
